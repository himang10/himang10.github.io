---
layout: post
title: k8s secrets guide
date: 2019-01-06
categories: kubernetes
tags: [kubernetes, secrets]
author: himang10
description: secrets 사용에 대한 설명
---

# Table of Contents
1. [Secrets](#secrets-introduction)
2. [Secret Creation Step](#secret-creation-step)
3. [Secret Usage in Pod](#secret-usage-in-pod)
4. [Pod fortune-https secret mount](#pod-fortune-https-secret-mount)
5. [PullImageSecret](#pullimagesecret)
6. [Ambassador](#ambassador)
7. [고려사항](#고려사항)


## Secrets introduction
중요한 정보를 저장하고 분류하기 위해 쿠버네티스는 시크릿이라고 하는 별도의 객체를 제공
시크릿은 configmap과 매우 유사하나 resource를 etcd에 저장 시 암호화해서 저장하며 
* 환경 변수로 시크릿 엔트리를 컨테이너에 전달
* 볼륨의 파일로서 시크릿 엔트리를 노출

```yaml
volumes:
    default-token-cfee9:
        Type: Secret (a volume populated by a secret)
        SecretName: default-token-cfee9
```
아래 항목은 포드에서 kube API Server와 안전하게 통신하기 위해 필요한 모든 것 

```config
$ kubectl describe secret default-token-6ln6s
Name:         default-token-6ln6s
Namespace:    default
Labels:       <none>
Annotations:  kubernetes.io/service-account.name=default
              kubernetes.io/service-account.uid=47d348be-0bf5-11e9-81dc-fa163e26d271

Type:  kubernetes.io/service-account-token

Data
====
ca.crt:     2004 bytes
namespace:  7 bytes
token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3Vud
```

## Secret Creation Step

1. Secrets 생성

```config
$ openssl genrsa -out https.key 2048
Generating RSA private key, 2048 bit long modulus
.......+++
.........................................................................................+++
e is 65537 (0x10001)

$ openssl req -new -x509 -key https.key -out https.cert -days 3650 -subj /CN=www.kubia-example.com

$ echo bar > foo

$ kubectl create secret generic fortune-https --from-file=https.key --from-file=https.cert --from-file=foo
secret "fortune-https" created
```

2. Configmap 과 Secret 비교

```yaml
$ kubectl get secret fortune-https -o yaml
apiVersion: v1
data:
  foo: YmFyCg==
  https.cert: LS0tLS1CRUdJ...
  https.key: LS0tLS1CRUd...
kind: Secret
metadata:
  creationTimestamp: 2019-01-06T08:45:55Z
  name: fortune-https
  namespace: default
  resourceVersion: "904038"
  selfLink: /api/v1/namespaces/default/secrets/fortune-https
  uid: 7afc4f3c-118f-11e9-a6b2-fa163e26d271
type: Opaque
```
*** configmap contents ***
```yaml
$ kubectl get configmap fortune-config-key -o yaml
apiVersion: v1
data:
  foo: |
    bar
  https.cert: |
    -----BEGIN CERTIFICATE-----
    MIICvDCCAaQCCQC9xB+jBoJG
    ...
    -----END CERTIFICATE-----
  https.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEowIBAAKCAQEAssw/hp+WMk5wr/hEnCJ7Sf6vi8D+deo6KGZPPNb0G5QuNUi5
    ...
    -----END RSA PRIVATE KEY-----
kind: ConfigMap
metadata:
  creationTimestamp: 2019-01-06T08:49:36Z
  name: fortune-config-key
  namespace: default
  resourceVersion: "904405"
  selfLink: /api/v1/namespaces/default/configmaps/fortune-config-key
  uid: fec7dd9a-118f-11e9-a6b2-fa163e26d271
```

*** 차이점: Base64 인코딩 적용 유무 ***

### Secret Usage in Pod
> secret 볼륨을 통해 컨테이너에 시크릿을 노출하면 시크릿 엔ㅌ리의 값은 디코딩돼 실제 형식의 파일에 기록된다. 
> 환경 변수를 통해 시크릿 항목을 노출할 때도 마찬가지이다. 두 경우 모두 애플리켕션에서 디코딩 할 필요는 없지만 파일 내용을 읽거나 환경 변수 값을 찾아 직접 사용할 수 있다.

## Pod fortune-https secret mount

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: fortune-https
spec:
  containers:
  - image: luksa/fortune:env
    name: html-generator
    env:
    - name: INTERVAL
      valueFrom:·
        configMapKeyRef:
          name: fortune-config
          key: sleep-interval
    volumeMounts:
    - name: html
      mountPath: /var/htdocs
  - image: nginx:alpine
    name: web-server
    volumeMounts:
    - name: html
      mountPath: /usr/share/nginx/html
      readOnly: true
    - name: config
      mountPath: /etc/nginx/conf.d
      readOnly: true
    - name: certs
      mountPath: /etc/nginx/certs/
      readOnly: true
    ports:
    - containerPort: 80
    - containerPort: 443
  *** volumes: ***
  - name: html
    emptyDir: {}
  - name: config
    configMap:
      name: fortune-config
      items:
      - key: my-nginx-config.conf
        path: https.conf
  *** - name: certs ***
    secret:
      secretName: fortune-https
```

### PullImageSecret
1.docker registry 인증을 위한 secret 생서

```config
$ kubectl create secret docker-registry mydockerhubsecret --docker-username=myusername --docker-password=mypassword --docker-email=my.email@profiver.com
```

2.pod 정의에서 docker registry secret 사용
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: private-pod
spec:
  imagePullSecrets:
  - name: mydockerhubsecret
  containers:
  - image: username/private:tag
    name: main
```

> ServiceAccount에 추가하면 이미지 풀 시크릿이 모든 포드에 자동으로 추가됨


### Ambassador
> Container가 API 서버에 직접 통신하는 대신 main container의 application은 HTTP를 통해 Ambassador (sidecar)에 연결하고 
> 보안 역할을 담당하는 ambassoador proxy가 API 서버에 HTTPS연결 처리하는 구조 

* Ambassador container가 있는 포트 

```yaml
# curl-with-ambassador.yaml
apiVersion: v1
kind: Pod
metadata:
  name: curl-with-ambassador
spec:
  containers:
  - name: main
    image: tutum/curl
    command: ["sleep", "9999999"]
  - name: ambassador
    image: luksa/kubectl-proxy:1.6.2
```

```
$ kubectl create -f curl-with-ambassador.yaml
pod "curl-with-ambassador" created
SKCC18N00029:~ himang10 in ~/ywyi/icp3.1/k8sbook/kubernetes-in-action/Chapter08 on master*
$ kubectl get pod
NAME                               READY     STATUS              RESTARTS   AGE
curl                               1/1       Running             0          53m
curl-with-ambassador               0/2       ContainerCreating   0          2s
fortune                            2/2       Running             0          2d
nfs-provisioner-64bf8f4776-ktrmr   1/1       Running             0          2d
SKCC18N00029:~ himang10 in ~/ywyi/icp3.1/k8sbook/kubernetes-in-action/Chapter08 on master*
$ kubectl get pod
NAME                               READY     STATUS    RESTARTS   AGE
curl                               1/1       Running   0          53m
curl-with-ambassador               2/2       Running   0          8s
fortune                            2/2       Running   0          2d
nfs-provisioner-64bf8f4776-ktrmr   1/1       Running   0          2d
SKCC18N00029:~ himang10 in ~/ywyi/icp3.1/k8sbook/kubernetes-in-action/Chapter08 on master*
$ kubectl exec -it curl-with-ambassador -c main sh
# curl localhost:8001
{
  "paths": [
    "/api",
    "/api/v1",
    "/apis",
    "/apis/",
    "/apis/admissionregistration.k8s.io",
    "/apis/admissionregistration.k8s.io/v1alpha1",
    "/apis/admissionregistration.k8s.io/v1beta1",
```

#### kubeproxy Dockerfile for Ambassador

```Dockerfile
FROM alpine
RUN apk update && apk add curl && curl -L -O https://dl.k8s.io/v1.8.0/kubernetes-client-linux-amd64.tar.gz && tar zvxf kubernetes-client-linux-amd64.tar.gz kubernetes/client/bin/kubectl && mv kubernetes/client/bin/kubectl / && rm -rf kubernetes && rm -f kubernetes-client-linux-amd64.tar.gz
ADD kubectl-proxy.sh /kubectl-proxy.sh
ENTRYPOINT /kubectl-proxy.sh
```

#### kube-proxy.sh for Ambassador

```
#!/bin/sh

API_SERVER="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT"
CA_CRT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"

/kubectl proxy --server="$API_SERVER" --certificate-authority="$CA_CRT" --token="$TOKEN" --accept-paths='^.*'
```

### 고려사항
시크릿을 컨터에니에 전달할 때 환경 변수로 제공하게 되면 의도치 않게 로그에 남을 수 있으므로 되도록이면 시크릿은 환경변수로 전달하지 않아야 함
