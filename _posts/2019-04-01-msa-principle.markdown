---
layout: post
title: 마이크로서비스 원칙
date: 2019-04-01
categories: MSA
author: himang10
tags: [msa, principle]
---

### Table of Contents
1. [마이크로서비스란](#마이크로서비스란)
3. [마이크로서비스 특징](#마이크로서비스_특징)


### 마이크로서비스란

#### 작고, 한가지 일을 잘하는 정도 크기
* 높은 응집도 낮은 결합도
로버트 C. 마틴 - 단일 책임 원칙 (Single Responsibility Principle)
``` 같은 이유 때문에 변경되는 것들은 한데 모으고(높은 응집력, High cohesion), 서로 다른 이유때문에 변경되는 것들은 분리하라(낮은 결합도, loose couple) ``` 

* 접근 방식
마이크로서비스는 독립적인 서비스들에 대해 동일한 접근 방식을 제공해야 한다.
주어진 기능과 관련 코드들이 명확하게 그 경계선 안에 있도록 할때 서비스 경계를 비즈니스 경계에 일치시킨다. 
그리고 이 서비스의 명확한 경계를 지키면서 서비스가 지나치게 커지는 것에 대한 유혹을 피해야 한다.

* 마이크로 서비스 크기 
경험적으로 마이크로서비스란 2주 안에 재 작성될 수 있는 것이라고 특정 지어 질 수 있다.
다른 답변은 ``` 충분히 작아서 더 이상 작아질 수 없는 크기 ```
마이크로 서비스가 작아지면 작아질 수 록 상호의존성은 줄어들지만 이에 반해 복잡도는 증가할 수 있다. 이를 해결하기 위해 * outer-architecture *가 필수 적이다.

#### 자율성
서비스의 분산도를 높이고(결합도를 낮추고), 서비스간 밀접하게 연결되어 생기는 문제점을 줄이기 위해 서비스 사이의 통신은 네트워크 호출을 통해 이루어진다. 
```
서비스들은 서로 독립적으로 변경될 수 있어야 하고, 소비자를 변경할 필요없이 독립적으로 배포될 수 있어야 한다.
이때 우리는 무엇을 외부에 드러내고 무엇을 내부에 두어야 하는지 고민해야 한다. 
```
너무 많이 들어내면 소비자 서비스가 내부 구현과 역이게 된다. 이 경우 서비스를 변경할 때 소비자와 조율할 께 그만큼 많아지므로 결과적으로 자율성이 줄어든다. 
이를 위해 기술에 종속적이지 않는 API 기술의 적용이 필요하다. 

### 마이크로서비스 특징

#### 기술 이기종성
최소한의 리스크로 신속하게 기술을 적용하고 전파할 수 있다
그러기 위해서는 다른 기술들의 병행 사용에 우려되더라고 부담을 최소한으로 줄수 있도록 하기 위해 실제 2주 안에 재 작성 가능한 수준의 크기로 한다면 리스크를 완화할 수 있다.

#### 회복성
모놀리틱 서비스에서는 한 서비스가 장애가 나면 모든 것이 멈춘다. 그러나 마이크로 서비스는 서비스의 전체 장애를 차단하고 장애를 격리하여 기능을 적절히 저하시키는 시스템을 구축할 수 있다.

#### 확장성
모놀리식 서비스는 항상 모든 것을 확장해야 하나 마이크로 서비스는 확장해야 할 대상을 선정하여 각 상황에 따라 확장 가능하다

#### 배포 용이성
모놀리식 서비스는 한줄만 수정해도 전체 배포가 되어야 한다. 그러나 마이크로 서비스는 하나의 서비스만 변경하고 배포할 수 있다. 
코드를 더 신속하게 배포할 수 있으며 문제가 발생하더라도 손쉽게 개별서비스만 롤백함으로써 해당 문제를 격리할 수 있다.

#### 조직 부합성
더 작은 팀이 더 작은 코드베이스로 일할 때 더 생산적이다.
```
콘웨이 법칙
소프트웨어 구조는 그 소프트웨어를 개발하는 조직읜 커뮤니케이션 구조를 따른다
```

#### 조합성 (composablity)
분산 시스템과 서비스 지향 아키텍처의 주요 장점은 기능을 재사용할 기회가 많다는 것이다. 

#### 대체 가능성을 위한 최적화
마이크로서비스 방식을 사용하는 팀은 필요할 경우 서비스를 완전히 재작성하는 것을 편하게 생각하며, 서비스가 더 이상 필요치 않으면 쉽게 제거 할 수 있다.
```
코드베이스가 단지 몇백 줄 규모일 때 개발자들은 자기가 쓴 코드이더라도 집착하지 않으며 고체 비용 또한 매우 적다
```
