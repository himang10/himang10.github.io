##########################################################################################
###################### BFF_SPRING_PIPELINE_PRD ###########################################
##########################################################################################
@Library('retort') _
import org.jenkinsci.plugins.pipeline.modeldefinition.Utils
def stage(name, execute, block) {
    return stage(name, execute ? block : {
        echo "Skipped stage : $name"
        Utils.markStageSkippedForConditional(STAGE_NAME)
    })
}
timestamps {
 def label = "jenkins-${UUID.randomUUID().toString()}"
 
 podTemplate(cloud: K8S_POD_TEMPLATE, label:label, serviceAccount: K8S_DVS_SA, terminationGracePeriodSeconds: 60,
  containers: [
      containerTemplate(name: 'jnlp', image: "${DOCKER_REGISTRY}/${DOCKER_DVS_NAMESPACE}/jnlp-slave:latest", args: '${computer.jnlpmac} ${computer.name}'),
   containerTemplate(name: 'maven', image: "${DOCKER_REGISTRY}/${DOCKER_DVS_NAMESPACE}/maven:3.5.2-jdk-8-alpine", ttyEnabled: true, command: 'cat'),
   containerTemplate(name: 'docker', image: "${DOCKER_REGISTRY}/${DOCKER_DVS_NAMESPACE}/docker:17.06.1-ce", ttyEnabled: true, command: 'cat'),
   containerTemplate(name: 'kubectl', image: "${DOCKER_REGISTRY}/${DOCKER_DVS_NAMESPACE}/k8s-kubectl", ttyEnabled: true, command: 'cat'),
   containerTemplate(name: 'postbot', image: "${DOCKER_REGISTRY}/${DOCKER_DVS_NAMESPACE}/postbot:0.6.0", ttyEnabled: true, command: 'cat')
  ],
  volumes: [
   hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
   hostPathVolume(hostPath: '/var/lib/docker', mountPath: '/var/lib/docker'),
   hostPathVolume(hostPath: '/etc/hosts', mountPath: '/etc/hosts'),
   persistentVolumeClaim(mountPath: '/appdata/maven/.m2/repository', claimName: MAVEN_REPO_PVC)
  ],
  workspaceVolume: 
   persistentVolumeClaimWorkspaceVolume(claimName: WORKSPACE_PVC, readOnly: false)
  ) {
  node(label) {
           
   def isExecute = true
   def isExists = false
     
   stage('Check Out Source', isExecute) {
    def gitTags
    def gitTagArray
    def gitCommitArray = []
    
    gitCmd.checkout credentialsId: GIT_CREDENTIAL, url: GIT_URL, branch: GIT_BRANCH
    
    // fetch tags & get tag list
    gitTags = sh (script: "git for-each-ref refs/tags --sort=-committerdate --format='%(refname:short)' --count=2", returnStdout: true)
    gitTagArray = gitTags.readLines()
    
    // check tag validation
    if(gitTagArray.size() < 1) {
     echo 'Tag is not exist, need to make tag on master branch'
     isExecute = false
     return
    } else if(gitTagArray.size() >= 1) {    
     if(gitTagArray.size() > 1) {
      gitCommitArray[0] = sh (script: "git show ${gitTagArray[0]} --format='%h'", returnStdout: true)
      gitCommitArray[1] = sh (script: "git show ${gitTagArray[1]} --format='%h'", returnStdout: true)
      
      if(gitCommitArray[0] == gitCommitArray[1]) {
       echo 'Nothing to Commit, Check Changes between lastest tags'
       currentBuild.result = 'UNSTABLE'
       isExecute = false
       return
      }
     }
     
     if(VERSION != gitTagArray[0]) {
      echo 'Tag version is not deploy version, Check git repository tag' 
      currentBuild.result = 'UNSTABLE'
      isExecute = false
      return
     }     
    } 
   }
   
   stage('Validate Version', isExecute) {
    container('kubectl') {
          
     def CURRENT_VER
     def CURRENT_DOCKER_IMAGE
     def DEPLOY_VER          
     
     if(isExists) {
      CURRENT_VER = sh (script: "kubectl -n ${K8S_APP_NAMESPACE} get service ${K8S_APP_NAME} -o=jsonpath={.spec.selector.version}", returnStdout: true)
      CURRENT_DOCKER_IMAGE = sh (script: "kubectl -n ${K8S_APP_NAMESPACE} get deployment ${K8S_APP_NAME}-${CURRENT_VER} -o=jsonpath={.spec.template.spec.containers[0].image}", returnStdout: true)
      DEPLOY_VER = VERSION.split(/\./)[0] + '.' + VERSION.split(/\./)[1]
      
      // if you want to update minor/major version, comment this part
      // but deployment name is diffrent from deployment name included yaml file
      if(CURRENT_VER != DEPLOY_VER) {
       echo 'Deployment version is not equal to current deployment version'
       echo 'or Cannot deploy as minor update'
       currentBuild.result = 'UNSTABLE'
       isExecute = false
       return
      }
      
      // check docker image whether current image is equal to deploy image
      if("${DOCKER_REGISTRY}/${K8S_APP_NAMESPACE}/${K8S_APP_NAME}:${VERSION}" == CURRENT_DOCKER_IMAGE) {
       echo 'Docker image is equal to current doocker image'
       currentBuild.result = 'UNSTABLE'
       isExecute = false
       return
      }
     }
    }     
   }
   
   stage('Build Maven', isExecute) {
    container('maven') {
     // maven build
     mavenBuild goal: 'clean package', options: '-e -U -DfinalName=app -DskipTests=true -Ddockerfile.skip', settingsID: 'default-global-maven-setting'
    }
   }
   stage('Build Docker Image', isExecute) {
    container('docker') {
     // docker build        
     dockerCmd.build tag: "${DOCKER_REGISTRY}/${K8S_APP_NAMESPACE}/${K8S_APP_NAME}:${VERSION}", buildArgs: [BUILD_ENV: PROJECT_ENVIRONMENT, DOCKER_REGISTRY: DOCKER_REGISTRY]
     // docker push
     dockerCmd.push registry: DOCKER_REGISTRY, imageName: "${K8S_APP_NAMESPACE}/${K8S_APP_NAME}", imageVersion: VERSION, credentialsId: DOCKER_CREDENTIAL
    }
   }   
   
   stage('Deploy On Kubernetes', isExecute) {                     
    container('kubectl') {
     
     def CURRENT_VER
     def CURRENT_DOCKER_IMAGE     
     
     isExists = kubeCmd.resourceExists file: "k8s/deployment-prd.yml", namespace: K8S_APP_NAMESPACE     
     
     if(isExists) {
      CURRENT_VER = sh (script: "kubectl -n ${K8S_APP_NAMESPACE} get service ${K8S_APP_NAME} -o=jsonpath={.spec.selector.version}", returnStdout: true)
      
      sh "cp k8s/deployment-prd.yml k8s/deployment-prd-bak.yml"
      
      // deploy-yaml file version update
      yaml.rollingDeployUpdate  file: 'k8s/deployment-prd.yml'
      
      // rolling update deployment
      try {
       sh "kubectl -n ${K8S_APP_NAMESPACE} set image deployment/${K8S_APP_NAME}-${CURRENT_VER} ${K8S_APP_NAME}=${DOCKER_REGISTRY}/${K8S_APP_NAMESPACE}/${K8S_APP_NAME}:${VERSION}"
       isSuccessDeploy = true
      } catch (Exception e) {
       echo 'Exception occured while waiting rollout.'
       echo e.toString()
       currentBuild.result = 'UNSTABLE'
       isExecute = false
       return
      }      
     }             
    }
   }
   
   stage('Update SCM & Build History', isExecute) {    
    gitCmd.commit file: ['k8s/deployment-prd.yml']
    gitCmd.push credentialsId: GIT_CREDENTIAL
    
    currentBuild.description = VERSION
   }
  }
 }      
}