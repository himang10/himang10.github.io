##########################################################################################
###################### BFF_SPRING_BG_3SC##### ###########################################
##########################################################################################
## BFF_SPRING_BG_3SC
@Library('retort') _
import org.jenkinsci.plugins.pipeline.modeldefinition.Utils
def stage(name, execute, block) {
    return stage(name, execute ? block : {
        echo "Skipped stage : $name"
        Utils.markStageSkippedForConditional(STAGE_NAME)
    })
}
timestamps {
 def label = "jenkins-${UUID.randomUUID().toString()}"
 podTemplate(cloud: K8S_POD_TEMPLATE, label:label, serviceAccount: K8S_DVS_SA, terminationGracePeriodSeconds: 60,
  containers: [
   containerTemplate(name: 'jnlp', image: "${DOCKER_REGISTRY}/${DOCKER_DVS_NAMESPACE}/jnlp-slave:latest", args: '${computer.jnlpmac} ${computer.name}'),
   containerTemplate(name: 'kubectl', image: "${DOCKER_REGISTRY}/${DOCKER_DVS_NAMESPACE}/k8s-kubectl", ttyEnabled: true, command: 'cat')   
  ],
  volumes: [
   hostPathVolume(hostPath: '/etc/hosts', mountPath: '/etc/hosts')
  ],
  workspaceVolume: 
   persistentVolumeClaimWorkspaceVolume(claimName: WORKSPACE_PVC, readOnly: false)
  ) {
  
  node(label) {  
   def isExecute = (IS_APPROVED == 'true') ? false : true
   
   stage('Check Out Source') {
    gitCmd.checkout credentialsId: GIT_CREDENTIAL, url: GIT_URL, branch: GIT_BRANCH
   }
   
   stage('Delete If Green Denied', isExecute) {
    echo '=== Denied : Delete Green Application ==='
    
    container('kubectl') {
     //gitCmd.checkout credentialsId: GIT_CREDENTIAL, url: GIT_URL, branch: GIT_BRANCH
     
     sh 'cp -p k8s/deployment-prd.yml k8s/deployment-g-prd.yml'
     
     // deploy-yaml file version update
     yaml.bluegreenDeployUpdate file: 'k8s/deployment-g-prd.yml'
     
     // delete green deployment
     kubeCmd.delete file: 'k8s/deployment-g-prd.yml', namespace: K8S_APP_NAMESPACE
     
     // rollback service
     kubeCmd.apply file: 'k8s/service-g.yml', namespace: K8S_APP_NAMESPACE
     
     sh 'rm -f k8s/deployment-g-prd.yml'
     currentBuild.result = 'UNSTABLE'
    }
   }
   
   
   stage('Scale Out Green Instance', !isExecute) {
    echo '=== Approved : Scale out Green Application ==='
    
    container('kubectl') {
     //gitCmd.checkout credentialsId: GIT_CREDENTIAL, url: GIT_URL, branch: GIT_BRANCH
     
     sh 'cp -p k8s/deployment-prd.yml k8s/deployment-g-prd.yml'
     
     // deploy-yaml file version update
     yaml.bluegreenDeployUpdate file: 'k8s/deployment-g-prd.yml'
     
     // scale out (from current app on k8s)
     if(IS_INIT_DEPLOY == 'false') {
      def BLUE_VER = sh (script: "kubectl -n ${K8S_APP_NAMESPACE} get service ${K8S_APP_NAME} -o=jsonpath={.spec.selector.version}", returnStdout: true)
      def BLUE_DEPLOY = K8S_APP_NAME + '-' + BLUE_VER
      def REPLICAS = sh (script: "kubectl -n ${K8S_APP_NAMESPACE} get deploy ${BLUE_DEPLOY} -o=jsonpath={.spec.replicas}", returnStdout: true)
      kubeCmd.scale file: 'k8s/deployment-g-prd.yml', namespace: K8S_APP_NAMESPACE, replicas: REPLICAS
     }
     
     sh 'rm -f k8s/deployment-g-prd.yml'
    }
   }
   
   stage('Build History') {
          currentBuild.description = VERSION
            }
  }
 }
}